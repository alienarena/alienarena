
                             Alien Arena
                            Version 7.66.1

1. Scope and Introduction

This document includes information about the GNU-Linux/Unix version of
Alien Arena and Alien Arena Tactical Demo. The information here
applies to the development version in the Subversion Repository
starting with Revision 4215 (March 9, 2014). This document does not
currently include details about the Tactical Demo and running a
dedicated server.

Custom options and other information specific to this version are
included here. For general information, licensing, and contributers,
see the README, COPYING and GPLv2 documents. For generic information
about installation using GNU Autotools: the original GNU INSTALL
document is included at the end of this document.

There are links to the Alien Arena Forum and other helpful
Internet resources on the Alien Arena Homepage:

  red.planetarena.org

The Alien Arena IRC (Internet Relay Chat) channel is now served by:

  irc.planetarena.org

The in-game IRC connects to the #alienarena channel there.


2. Requirements

2.1 System Requirements

A video adapter with 3D acceleration using the latest proprietary
OpenGL driver is recommended. If you have not previously run a 3D FPS
(First Person Shooter) at playable frame rates, or if you do not know
what this means, you may want to verify your system has adequate 3D
performance before proceeding.

2.2 Installing Subversion

The Subversion program is required to download from the Subversion
Repository. Use your Linux distribution's package manager to install
Subversion. Subversion is commonly referred to as SVN (for instance:
"I installed from SVN" or "I updated to the latest SVN").

2.3 Subversion Initial Download and Updating

Anonymous read-only download (checkout) is available using this
command line:

  $ svn co svn://svn.icculus.org/alienarena/trunk alienarena

This is run in a terminal, normally in your HOME directory.

To update to the latest version after the initial download, change to
your alienarena subdirectory and use this command line:

  $ svn update

It is a good idea to browse the repository before doing the initial
download or updates. The initial download is large. Updates are much
smaller. You can browse the repository using this URL:

  http://svn.icculus.org/alienarena/trunk/

2.4 Installing Tools and Libraries

For Linux, there is no pre-built executable. The executable is built
after the initial download and rebuilt after updates using an
automated system called GNU Autotools. This system is also used for
installation of executables and data.

But, before that can be done, certain tools and libraries must be
installed. Use your distribution's package manager to install
these. Depending on your distribution, some of these may already be
installed. Some distributions have special development versions that
are not installed by default but are needed to build programs. These
will have a suffix of "-dev" or "-devel". Some example library names
are given below in parentheses. These libraries may depend on other
libraries; the package manager will automatically install those
dependencies.

  * gcc or g++  (the GNU 'c/c++' compiler tools)
  * pkg-config  (a library configuration information tool)

  * X11         (libx11-dev, libX11, libxxf86dga-dev, libxxf86vm-dev, libXxf86vm)
  * OpenGL      (libgl1-mesa-dev, libGL)
  * OpenAL 1.1  (libopenal-dev, libopenal)
  * Ogg-Vorbis, (libogg-dev, libvorbis-dev. libogg, libvorbis, libvorbisfile)
  * cURL,       (libcurl, libcurl4-gnutls-dev)
  * FreeType2   (libfreetype, libfreetype6-dev)
  * JPEG        (libjpeg8-dev, libjpeg8)
  * ZLib        (libz, libz-dev)
  * ODE         (libode, libode-dev)

For Debian-based distributions (such as Ubuntu and Mint), this command
should get all of what you need. Enter it all on one command line.

  $ sudo apt-get install libx11-dev libxxf86dga-dev libxxf86vm-dev \
    libgl1-mesa-dev libopenal-dev libogg-dev libvorbis-dev \ 
    libcurl4-gnutls-dev libfreetype6-dev libjpeg8-dev libode-dev g++


3. Building and Installing

Using the terminal, change to the destination directory for the svn
checkout command (normally, ~/alienarena). If required libraries are
missing, the 'configure' command will exit with error messages.

The following commands will build and install the program and data
with the default configuration:

  $ ./configure
  $ make
  $ sudo make install

However, for better build and run-time performance, you should use
these commands instead:

  $ export CFLAGS='-march=native -O3 -g -pipe -DNDEBUG'
  $ ./configure
  $ make -jN  (where N is your CPU's number of cores + 1)
  $ sudo make install

By default, 'sudo make install' will install the game programs
and data using this directory hierarchy:

  /usr/local/
    bin/
      alienarena
      alienarena-ded  (dedicated server)
      aa-tactical-demo
    share/
      alienarena/
        arena/
        data1/
        tactical/
      doc/
        alienarena/
      icons/
        alienarena/

Following installation, intermediate files generated by the build
may be removed using:

  $ make clean

To uninstall the program and data that 'sudo make install'
installed, run:

  $ sudo make uninstall

The uninstall procedure may not remove all files and directories.
Some manual removal may be required.

If you know what you are doing, the installation may be
customized. For more information, run:

  $ ./configure --help


4. Updating

4.1 The Safe Way to Update

Sometimes during development there are changes that remove data
files. In order to prevent that from causing problems, the following
is the safest way to update (using the recommended configuration).

  $ cd ~/alienarena
  $ sudo make uninstall
  $ make clean
  $ svn update
  $ export CFLAGS='-march=native -O3 -g -pipe -DNDEBUG'
  $ ./configure
  $ make
  $ sudo make install

4.2 A Faster Way to Update

Often the only changes in the SVN Repository are to program source
files (which have '.c' or '.h' extensions). If you update frequently,
it is faster to use the following commands. If you do not know what
all this means, you should use the safer way shown above.

  $ cd ~/alienarena
  $ svn update
  $ make

If the update output showed that only program source files were
changed:

  $ sudo make install-exec

If the update output showed that resource files were added:

  $ sudo make install

It is a good idea to browse the repository before doing an update to
see what has changed since your last update. You can browse the
repository using this URL:

  http://svn.icculus.org/alienarena/trunk/


5. Running

5.1 Setup

Use the Menu for setting video configuration and other options.

For the first run, do the following:

 $ cd
 $ alienarena

Go to the GAME OPTIONS menu, enter a Player name and password, then
Apply. A name and password is required for online play. Set the other
options to your preferences; details are beyond the scope of this
document.

Then, quit the game using the QUIT GAME menu selection. This is done
to make sure the configuration is created and saved.

Configuration, screen shots, and other data is stored in:

  ~/.local/share/cor-games/arena

Note that this is different from earlier versions of Alien Arena.

The file, 'config.cfg', stores the current settings when the game
exits normally. Do not edit this file. For custom settings, create a
file named 'autoexec.cfg'. Visit the Forums for more information on
custom configuration.

There are a number of 3rd-party and legacy maps that are not installed
as part of the standard installation. These may be downloaded and
stored in the 'cor-games/arena' subdirectory. When playing online,
maps that you do not have are automatically downloaded and stored
there.

SVN installation and update DO NOT alter files in the 'cor-games'
subdirectory.

Files in the 'cor-games' subdirectory have precedence over the
standard files in '/usr/local/share/alienarena'. Normally, this in not
a problem, but sometimes SVN updates or downloads result in obsolete
files in 'cor-games' overriding newer files.

5.2 Normal Operation

To run:
  $ cd	
  $ alienarena

In the menu, SINGLE PLAYER will run a simple pre-configured local
games. For more single player options, go to the HOST SERVER menu.
Setting "public server" to "no" will keep your local game from being
broadcast with the master server list.

For multiplayer, online play, go to the JOIN SERVER menu to find a
Server. Bots will always show ping of 0. They have some mean sounding,
but amusing, taunts. Do not let it bother you, just frag 'em. They may
attack with the "probe", if you let them get close, watch out!

Command line options to 'alienarena' are NOT standard. They follow a
format inherited from Alien Arena's Quake 2 roots. Command line
options are the same as console commands, normally using a '+'
character prefix. The details are beyond the scope of this document.

5.3 Special "In-place" Operation

For various reasons (map making, for example), one may want to run the
program using data installed in one's HOME directory, rather than in
/usr/local/. Formerly, this required a special build. That is no
longer the case. Running the program from the directory containing
the data1/ sub-directory will cause the program to use that directory
for data instead of /usr/local/share/alienarena.

For example, assuming the program has been checked out from SVN and
built in ~/alienarena.

To run normally:

  $ cd
  $ alienarena

To run using the data files in ~/alienarena:

  $ cd ~/alienarena
  $ alienarena

Standard disclaimer: You should do this only if you know what you are
doing.


6. Network Information

These ports are used by the program:
  * UDP 27900 for the master server. Used for getting server list.
  * UDP 27901 for the client.
  * UDP 27902 for account/stats system password validation.
  * UDP 27910 is the default for a server, but is often configured otherwise.
  * TCP 6667  is the default for in-game connection to the IRC channel.

The cURL library is used to retrieve game resources, player
ranking information, and current version information from these
URLs:
  * http://red.planetarena.org/sv_downloadurl
  * http://stats.planetarena.org/playerrank.db
  * http://red.planetarena.org/version/crx_version

Online performance will vary depending on the network connection
between the your computer (the client) and the server. Servers
with *lower* ping are better.

Playing online may require firewall configuration.


7. Troubleshooting

If you encounter problems, first check in the Forums for the latest
information:

  red.planetarena.org/forum

Bug reports are posted in the Support/Bug Reports section. If you are
reporting a new bug, please include information about your system and
the SVN Revision you are running.


************************************************************************
                              ADDENDUM
------------------------------------------------------------------------
NOTE: This following is a copy of the GNU Document, INSTALL, with
more technical details related to GNU Autotools than the above.
------------------------------------------------------------------------
************************************************************************

Installation Instructions
*************************

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
2006, 2007, 2008, 2009 Free Software Foundation, Inc.

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without warranty of any kind.

Basic Installation
==================

   Briefly, the shell commands `./configure; make; make install' should
configure, build, and install this package.  The following
more-detailed instructions are generic; see the `README' file for
instructions specific to this package.  Some packages provide this
`INSTALL' file but do not implement all of the features documented
below.  The lack of an optional feature in a given package is not
necessarily a bug.  More recommendations for GNU packages can be found
in *note Makefile Conventions: (standards)Makefile Conventions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You need `configure.ac' if
you want to change it or regenerate `configure' using a newer version
of `autoconf'.

   The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package, generally using the just-built uninstalled binaries.

  4. Type `make install' to install the programs and any data files and
     documentation.  When installing into a prefix owned by root, it is
     recommended that the package be configured and built as a regular
     user, and only the `make install' phase executed with root
     privileges.

  5. Optionally, type `make installcheck' to repeat any self-tests, but
     this time using the binaries in their final installed location.
     This target does not install anything.  Running this target as a
     regular user, particularly if the prior `make install' required
     root privileges, verifies that the installation completed
     correctly.

  6. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  7. Often, you can also type `make uninstall' to remove the installed
     files again.  In practice, not all packages have tested that
     uninstallation works correctly, even though it is required by the
     GNU Coding Standards.

------------------------------------------------------------------------
