
#ifdef INCLUDE_GLX
T(XVisualInfo *)	N(XChooseVisual)	A((Display *dpy, int screen, int *attribList);)
T(GLXContext)	N(XCreateContext)	A((Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct);)
T(void)	N(XDestroyContext)	A((Display *dpy, GLXContext ctx);)
T(Bool)	N(XMakeCurrent)	A((Display *dpy, GLXDrawable drawable, GLXContext ctx);)
T(void)	N(XCopyContext)	A((Display *dpy, GLXContext src, GLXContext dst, GLuint mask);)
T(void)	N(XSwapBuffers)	A((Display *dpy, GLXDrawable drawable);)
T(void *) N(XGetProcAddress) A((const char*);)
#endif

T(void)	N(Accum)	A((GLenum op, GLfloat value);)
T(void)	N(AlphaFunc)	A((GLenum func, GLclampf ref);)
T(GLboolean)	N(AreTexturesResident)	A((GLsizei n, const GLuint *textures, GLboolean *residences);)
T(void)	N(ArrayElement)	A((GLint i);)
T(void)	N(Begin)	A((GLenum mode);)
T(void)	N(BindTexture)	A((GLenum target, GLuint texture);)
T(void)	N(Bitmap)	A((GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);)
T(void)	N(BlendFunc)	A((GLenum sfactor, GLenum dfactor);)
T(void)	N(CallList)	A((GLuint list);)
T(void)	N(CallLists)	A((GLsizei n, GLenum type, const GLvoid *lists);)
T(void)	N(Clear)	A((GLbitfield mask);)
T(void)	N(ClearAccum)	A((GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);)
T(void)	N(ClearColor)	A((GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);)
T(void)	N(ClearDepth)	A((GLclampd depth);)
T(void)	N(ClearIndex)	A((GLfloat c);)
T(void)	N(ClearStencil)	A((GLint s);)
T(void)	N(ClipPlane)	A((GLenum plane, const GLdouble *equation);)
T(void)	N(Color3b)	A((GLbyte red, GLbyte green, GLbyte blue);)
T(void)	N(Color3bv)	A((const GLbyte *v);)
T(void)	N(Color3d)	A((GLdouble red, GLdouble green, GLdouble blue);)
T(void)	N(Color3dv)	A((const GLdouble *v);)
T(void)	N(Color3f)	A((GLfloat red, GLfloat green, GLfloat blue);)
T(void)	N(Color3fv)	A((const GLfloat *v);)
T(void)	N(Color3i)	A((GLint red, GLint green, GLint blue);)
T(void)	N(Color3iv)	A((const GLint *v);)
T(void)	N(Color3s)	A((GLshort red, GLshort green, GLshort blue);)
T(void)	N(Color3sv)	A((const GLshort *v);)
T(void)	N(Color3ub)	A((GLubyte red, GLubyte green, GLubyte blue);)
T(void)	N(Color3ubv)	A((const GLubyte *v);)
T(void)	N(Color3ui)	A((GLuint red, GLuint green, GLuint blue);)
T(void)	N(Color3uiv)	A((const GLuint *v);)
T(void)	N(Color3us)	A((GLushort red, GLushort green, GLushort blue);)
T(void)	N(Color3usv)	A((const GLushort *v);)
T(void)	N(Color4b)	A((GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);)
T(void)	N(Color4bv)	A((const GLbyte *v);)
T(void)	N(Color4d)	A((GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);)
T(void)	N(Color4dv)	A((const GLdouble *v);)
T(void)	N(Color4f)	A((GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);)
T(void)	N(Color4fv)	A((const GLfloat *v);)
T(void)	N(Color4i)	A((GLint red, GLint green, GLint blue, GLint alpha);)
T(void)	N(Color4iv)	A((const GLint *v);)
T(void)	N(Color4s)	A((GLshort red, GLshort green, GLshort blue, GLshort alpha);)
T(void)	N(Color4sv)	A((const GLshort *v);)
T(void)	N(Color4ub)	A((GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);)
T(void)	N(Color4ubv)	A((const GLubyte *v);)
T(void)	N(Color4ui)	A((GLuint red, GLuint green, GLuint blue, GLuint alpha);)
T(void)	N(Color4uiv)	A((const GLuint *v);)
T(void)	N(Color4us)	A((GLushort red, GLushort green, GLushort blue, GLushort alpha);)
T(void)	N(Color4usv)	A((const GLushort *v);)
T(void)	N(ColorMask)	A((GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);)
T(void)	N(ColorMaterial)	A((GLenum face, GLenum mode);)
T(void)	N(ColorPointer)	A((GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);)
T(void)	N(CopyPixels)	A((GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);)
T(void)	N(CopyTexImage1D)	A((GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);)
T(void)	N(CopyTexImage2D)	A((GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);)
T(void)	N(CopyTexSubImage1D)	A((GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);)
T(void)	N(CopyTexSubImage2D)	A((GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);)
T(void)	N(CullFace)	A((GLenum mode);)
T(void)	N(DeleteLists)	A((GLuint list, GLsizei range);)
T(void)	N(DeleteTextures)	A((GLsizei n, const GLuint *textures);)
T(void)	N(DepthFunc)	A((GLenum func);)
T(void)	N(DepthMask)	A((GLboolean flag);)
T(void)	N(DepthRange)	A((GLclampd zNear, GLclampd zFar);)
T(void)	N(Disable)	A((GLenum cap);)
T(void)	N(DisableClientState)	A((GLenum array);)
T(void)	N(DrawArrays)	A((GLenum mode, GLint first, GLsizei count);)
T(void)	N(DrawBuffer)	A((GLenum mode);)
T(void)	N(DrawElements)	A((GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);)
T(void)	N(DrawRangeElements)	A((GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);)
T(void)	N(DrawPixels)	A((GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);)
T(void)	N(EdgeFlag)	A((GLboolean flag);)
T(void)	N(EdgeFlagPointer)	A((GLsizei stride, const GLvoid *pointer);)
T(void)	N(EdgeFlagv)	A((const GLboolean *flag);)
T(void)	N(Enable)	A((GLenum cap);)
T(GLboolean)	N(IsEnabled)	A((GLenum cap);)
T(void)	N(EnableClientState)	A((GLenum array);)
T(void)	N(End)	A((void);)
T(void)	N(EndList)	A((void);)
T(void)	N(EvalCoord1d)	A((GLdouble u);)
T(void)	N(EvalCoord1dv)	A((const GLdouble *u);)
T(void)	N(EvalCoord1f)	A((GLfloat u);)
T(void)	N(EvalCoord1fv)	A((const GLfloat *u);)
T(void)	N(EvalCoord2d)	A((GLdouble u, GLdouble v);)
T(void)	N(EvalCoord2dv)	A((const GLdouble *u);)
T(void)	N(EvalCoord2f)	A((GLfloat u, GLfloat v);)
T(void)	N(EvalCoord2fv)	A((const GLfloat *u);)
T(void)	N(EvalMesh1)	A((GLenum mode, GLint i1, GLint i2);)
T(void)	N(EvalMesh2)	A((GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);)
T(void)	N(EvalPoint1)	A((GLint i);)
T(void)	N(EvalPoint2)	A((GLint i, GLint j);)
T(void)	N(FeedbackBuffer)	A((GLsizei size, GLenum type, GLfloat *buffer);)
T(void)	N(Finish)	A((void);)
T(void)	N(Flush)	A((void);)
T(void)	N(Fogf)	A((GLenum pname, GLfloat param);)
T(void)	N(Fogfv)	A((GLenum pname, const GLfloat *params);)
T(void)	N(Fogi)	A((GLenum pname, GLint param);)
T(void)	N(Fogiv)	A((GLenum pname, const GLint *params);)
T(void)	N(FrontFace)	A((GLenum mode);)
T(void)	N(Frustum)	A((GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);)
T(GLuint)	N(GenLists)	A((GLsizei range);)
T(void)	N(GenTextures)	A((GLsizei n, GLuint *textures);)
T(void)	N(GetBooleanv)	A((GLenum pname, GLboolean *params);)
T(void)	N(GetClipPlane)	A((GLenum plane, GLdouble *equation);)
T(void)	N(GetDoublev)	A((GLenum pname, GLdouble *params);)
T(GLenum)	N(GetError)	A((void);)
T(void)	N(GetFloatv)	A((GLenum pname, GLfloat *params);)
T(void)	N(GetIntegerv)	A((GLenum pname, GLint *params);)
T(void)	N(GetLightfv)	A((GLenum light, GLenum pname, GLfloat *params);)
T(void)	N(GetLightiv)	A((GLenum light, GLenum pname, GLint *params);)
T(void)	N(GetMapdv)	A((GLenum target, GLenum query, GLdouble *v);)
T(void)	N(GetMapfv)	A((GLenum target, GLenum query, GLfloat *v);)
T(void)	N(GetMapiv)	A((GLenum target, GLenum query, GLint *v);)
T(void)	N(GetMaterialfv)	A((GLenum face, GLenum pname, GLfloat *params);)
T(void)	N(GetMaterialiv)	A((GLenum face, GLenum pname, GLint *params);)
T(void)	N(GetPixelMapfv)	A((GLenum map, GLfloat *values);)
T(void)	N(GetPixelMapuiv)	A((GLenum map, GLuint *values);)
T(void)	N(GetPixelMapusv)	A((GLenum map, GLushort *values);)
T(void)	N(GetPointerv)	A((GLenum pname, GLvoid* *params);)
T(void)	N(GetPolygonStipple)	A((GLubyte *mask);)
T(const GLubyte *)	N(GetString)	A((GLenum name);)
T(void)	N(GetTexEnvfv)	A((GLenum target, GLenum pname, GLfloat *params);)
T(void)	N(GetTexEnviv)	A((GLenum target, GLenum pname, GLint *params);)
T(void)	N(GetTexGendv)	A((GLenum coord, GLenum pname, GLdouble *params);)
T(void)	N(GetTexGenfv)	A((GLenum coord, GLenum pname, GLfloat *params);)
T(void)	N(GetTexGeniv)	A((GLenum coord, GLenum pname, GLint *params);)
T(void)	N(GetTexImage)	A((GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);)
T(void)	N(GetTexLevelParameterfv)	A((GLenum target, GLint level, GLenum pname, GLfloat *params);)
T(void)	N(GetTexLevelParameteriv)	A((GLenum target, GLint level, GLenum pname, GLint *params);)
T(void)	N(GetTexParameterfv)	A((GLenum target, GLenum pname, GLfloat *params);)
T(void)	N(GetTexParameteriv)	A((GLenum target, GLenum pname, GLint *params);)
T(void)	N(Hint)	A((GLenum target, GLenum mode);)
T(void)	N(IndexMask)	A((GLuint mask);)
T(void)	N(IndexPointer)	A((GLenum type, GLsizei stride, const GLvoid *pointer);)
T(void)	N(Indexd)	A((GLdouble c);)
T(void)	N(Indexdv)	A((const GLdouble *c);)
T(void)	N(Indexf)	A((GLfloat c);)
T(void)	N(Indexfv)	A((const GLfloat *c);)
T(void)	N(Indexi)	A((GLint c);)
T(void)	N(Indexiv)	A((const GLint *c);)
T(void)	N(Indexs)	A((GLshort c);)
T(void)	N(Indexsv)	A((const GLshort *c);)
T(void)	N(Indexub)	A((GLubyte c);)
T(void)	N(Indexubv)	A((const GLubyte *c);)
T(void)	N(InitNames)	A((void);)
T(void)	N(InterleavedArrays)	A((GLenum format, GLsizei stride, const GLvoid *pointer);)
T(GLboolean)	N(IsEnabled)	A((GLenum cap);)
T(GLboolean)	N(IsList)	A((GLuint list);)
T(GLboolean)	N(IsTexture)	A((GLuint texture);)
T(void)	N(LightModelf)	A((GLenum pname, GLfloat param);)
T(void)	N(LightModelfv)	A((GLenum pname, const GLfloat *params);)
T(void)	N(LightModeli)	A((GLenum pname, GLint param);)
T(void)	N(LightModeliv)	A((GLenum pname, const GLint *params);)
T(void)	N(Lightf)	A((GLenum light, GLenum pname, GLfloat param);)
T(void)	N(Lightfv)	A((GLenum light, GLenum pname, const GLfloat *params);)
T(void)	N(Lighti)	A((GLenum light, GLenum pname, GLint param);)
T(void)	N(Lightiv)	A((GLenum light, GLenum pname, const GLint *params);)
T(void)	N(LineStipple)	A((GLint factor, GLushort pattern);)
T(void)	N(LineWidth)	A((GLfloat width);)
T(void)	N(ListBase)	A((GLuint base);)
T(void)	N(LoadIdentity)	A((void);)
T(void)	N(LoadMatrixd)	A((const GLdouble *m);)
T(void)	N(LoadMatrixf)	A((const GLfloat *m);)
T(void)	N(LoadName)	A((GLuint name);)
T(void)	N(LogicOp)	A((GLenum opcode);)
T(void)	N(Map1d)	A((GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);)
T(void)	N(Map1f)	A((GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);)
T(void)	N(Map2d)	A((GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);)
T(void)	N(Map2f)	A((GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);)
T(void)	N(MapGrid1d)	A((GLint un, GLdouble u1, GLdouble u2);)
T(void)	N(MapGrid1f)	A((GLint un, GLfloat u1, GLfloat u2);)
T(void)	N(MapGrid2d)	A((GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);)
T(void)	N(MapGrid2f)	A((GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);)
T(void)	N(Materialf)	A((GLenum face, GLenum pname, GLfloat param);)
T(void)	N(Materialfv)	A((GLenum face, GLenum pname, const GLfloat *params);)
T(void)	N(Materiali)	A((GLenum face, GLenum pname, GLint param);)
T(void)	N(Materialiv)	A((GLenum face, GLenum pname, const GLint *params);)
T(void)	N(MatrixMode)	A((GLenum mode);)
T(void)	N(MultMatrixd)	A((const GLdouble *m);)
T(void)	N(MultMatrixf)	A((const GLfloat *m);)
T(void)	N(NewList)	A((GLuint list, GLenum mode);)
T(void)	N(Normal3b)	A((GLbyte nx, GLbyte ny, GLbyte nz);)
T(void)	N(Normal3bv)	A((const GLbyte *v);)
T(void)	N(Normal3d)	A((GLdouble nx, GLdouble ny, GLdouble nz);)
T(void)	N(Normal3dv)	A((const GLdouble *v);)
T(void)	N(Normal3f)	A((GLfloat nx, GLfloat ny, GLfloat nz);)
T(void)	N(Normal3fv)	A((const GLfloat *v);)
T(void)	N(Normal3i)	A((GLint nx, GLint ny, GLint nz);)
T(void)	N(Normal3iv)	A((const GLint *v);)
T(void)	N(Normal3s)	A((GLshort nx, GLshort ny, GLshort nz);)
T(void)	N(Normal3sv)	A((const GLshort *v);)
T(void)	N(NormalPointer)	A((GLenum type, GLsizei stride, const GLvoid *pointer);)
T(void)	N(Ortho)	A((GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);)
T(void)	N(PassThrough)	A((GLfloat token);)
T(void)	N(PixelMapfv)	A((GLenum map, GLsizei mapsize, const GLfloat *values);)
T(void)	N(PixelMapuiv)	A((GLenum map, GLsizei mapsize, const GLuint *values);)
T(void)	N(PixelMapusv)	A((GLenum map, GLsizei mapsize, const GLushort *values);)
T(void)	N(PixelStoref)	A((GLenum pname, GLfloat param);)
T(void)	N(PixelStorei)	A((GLenum pname, GLint param);)
T(void)	N(PixelTransferf)	A((GLenum pname, GLfloat param);)
T(void)	N(PixelTransferi)	A((GLenum pname, GLint param);)
T(void)	N(PixelZoom)	A((GLfloat xfactor, GLfloat yfactor);)
T(void)	N(PointSize)	A((GLfloat size);)
T(void)	N(PolygonMode)	A((GLenum face, GLenum mode);)
T(void)	N(PolygonOffset)	A((GLfloat factor, GLfloat units);)
T(void)	N(PolygonStipple)	A((const GLubyte *mask);)
T(void)	N(PopAttrib)	A((void);)
T(void)	N(PopClientAttrib)	A((void);)
T(void)	N(PopMatrix)	A((void);)
T(void)	N(PopName)	A((void);)
T(void)	N(PrioritizeTextures)	A((GLsizei n, const GLuint *textures, const GLclampf *priorities);)
T(void)	N(PushAttrib)	A((GLbitfield mask);)
T(void)	N(PushClientAttrib)	A((GLbitfield mask);)
T(void)	N(PushMatrix)	A((void);)
T(void)	N(PushName)	A((GLuint name);)
T(void)	N(RasterPos2d)	A((GLdouble x, GLdouble y);)
T(void)	N(RasterPos2dv)	A((const GLdouble *v);)
T(void)	N(RasterPos2f)	A((GLfloat x, GLfloat y);)
T(void)	N(RasterPos2fv)	A((const GLfloat *v);)
T(void)	N(RasterPos2i)	A((GLint x, GLint y);)
T(void)	N(RasterPos2iv)	A((const GLint *v);)
T(void)	N(RasterPos2s)	A((GLshort x, GLshort y);)
T(void)	N(RasterPos2sv)	A((const GLshort *v);)
T(void)	N(RasterPos3d)	A((GLdouble x, GLdouble y, GLdouble z);)
T(void)	N(RasterPos3dv)	A((const GLdouble *v);)
T(void)	N(RasterPos3f)	A((GLfloat x, GLfloat y, GLfloat z);)
T(void)	N(RasterPos3fv)	A((const GLfloat *v);)
T(void)	N(RasterPos3i)	A((GLint x, GLint y, GLint z);)
T(void)	N(RasterPos3iv)	A((const GLint *v);)
T(void)	N(RasterPos3s)	A((GLshort x, GLshort y, GLshort z);)
T(void)	N(RasterPos3sv)	A((const GLshort *v);)
T(void)	N(RasterPos4d)	A((GLdouble x, GLdouble y, GLdouble z, GLdouble w);)
T(void)	N(RasterPos4dv)	A((const GLdouble *v);)
T(void)	N(RasterPos4f)	A((GLfloat x, GLfloat y, GLfloat z, GLfloat w);)
T(void)	N(RasterPos4fv)	A((const GLfloat *v);)
T(void)	N(RasterPos4i)	A((GLint x, GLint y, GLint z, GLint w);)
T(void)	N(RasterPos4iv)	A((const GLint *v);)
T(void)	N(RasterPos4s)	A((GLshort x, GLshort y, GLshort z, GLshort w);)
T(void)	N(RasterPos4sv)	A((const GLshort *v);)
T(void)	N(ReadBuffer)	A((GLenum mode);)
T(void)	N(ReadPixels)	A((GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);)
T(void)	N(Rectd)	A((GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);)
T(void)	N(Rectdv)	A((const GLdouble *v1, const GLdouble *v2);)
T(void)	N(Rectf)	A((GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);)
T(void)	N(Rectfv)	A((const GLfloat *v1, const GLfloat *v2);)
T(void)	N(Recti)	A((GLint x1, GLint y1, GLint x2, GLint y2);)
T(void)	N(Rectiv)	A((const GLint *v1, const GLint *v2);)
T(void)	N(Rects)	A((GLshort x1, GLshort y1, GLshort x2, GLshort y2);)
T(void)	N(Rectsv)	A((const GLshort *v1, const GLshort *v2);)
T(GLint)	N(RenderMode)	A((GLenum mode);)
T(void)	N(Rotated)	A((GLdouble angle, GLdouble x, GLdouble y, GLdouble z);)
T(void)	N(Rotatef)	A((GLfloat angle, GLfloat x, GLfloat y, GLfloat z);)
T(void)	N(Scaled)	A((GLdouble x, GLdouble y, GLdouble z);)
T(void)	N(Scalef)	A((GLfloat x, GLfloat y, GLfloat z);)
T(void)	N(Scissor)	A((GLint x, GLint y, GLsizei width, GLsizei height);)
T(void)	N(SelectBuffer)	A((GLsizei size, GLuint *buffer);)
T(void)	N(ShadeModel)	A((GLenum mode);)
T(void)	N(StencilFunc)	A((GLenum func, GLint ref, GLuint mask);)
T(void)	N(StencilMask)	A((GLuint mask);)
T(void)	N(StencilOp)	A((GLenum fail, GLenum zfail, GLenum zpass);)
T(void)	N(TexCoord1d)	A((GLdouble s);)
T(void)	N(TexCoord1dv)	A((const GLdouble *v);)
T(void)	N(TexCoord1f)	A((GLfloat s);)
T(void)	N(TexCoord1fv)	A((const GLfloat *v);)
T(void)	N(TexCoord1i)	A((GLint s);)
T(void)	N(TexCoord1iv)	A((const GLint *v);)
T(void)	N(TexCoord1s)	A((GLshort s);)
T(void)	N(TexCoord1sv)	A((const GLshort *v);)
T(void)	N(TexCoord2d)	A((GLdouble s, GLdouble t);)
T(void)	N(TexCoord2dv)	A((const GLdouble *v);)
T(void)	N(TexCoord2f)	A((GLfloat s, GLfloat t);)
T(void)	N(TexCoord2fv)	A((const GLfloat *v);)
T(void)	N(TexCoord2i)	A((GLint s, GLint t);)
T(void)	N(TexCoord2iv)	A((const GLint *v);)
T(void)	N(TexCoord2s)	A((GLshort s, GLshort t);)
T(void)	N(TexCoord2sv)	A((const GLshort *v);)
T(void)	N(TexCoord3d)	A((GLdouble s, GLdouble t, GLdouble r);)
T(void)	N(TexCoord3dv)	A((const GLdouble *v);)
T(void)	N(TexCoord3f)	A((GLfloat s, GLfloat t, GLfloat r);)
T(void)	N(TexCoord3fv)	A((const GLfloat *v);)
T(void)	N(TexCoord3i)	A((GLint s, GLint t, GLint r);)
T(void)	N(TexCoord3iv)	A((const GLint *v);)
T(void)	N(TexCoord3s)	A((GLshort s, GLshort t, GLshort r);)
T(void)	N(TexCoord3sv)	A((const GLshort *v);)
T(void)	N(TexCoord4d)	A((GLdouble s, GLdouble t, GLdouble r, GLdouble q);)
T(void)	N(TexCoord4dv)	A((const GLdouble *v);)
T(void)	N(TexCoord4f)	A((GLfloat s, GLfloat t, GLfloat r, GLfloat q);)
T(void)	N(TexCoord4fv)	A((const GLfloat *v);)
T(void)	N(TexCoord4i)	A((GLint s, GLint t, GLint r, GLint q);)
T(void)	N(TexCoord4iv)	A((const GLint *v);)
T(void)	N(TexCoord4s)	A((GLshort s, GLshort t, GLshort r, GLshort q);)
T(void)	N(TexCoord4sv)	A((const GLshort *v);)
T(void)	N(TexCoordPointer)	A((GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);)
T(void)	N(TexEnvf)	A((GLenum target, GLenum pname, GLfloat param);)
T(void)	N(TexEnvfv)	A((GLenum target, GLenum pname, const GLfloat *params);)
T(void)	N(TexEnvi)	A((GLenum target, GLenum pname, GLint param);)
T(void)	N(TexEnviv)	A((GLenum target, GLenum pname, const GLint *params);)
T(void)	N(TexGend)	A((GLenum coord, GLenum pname, GLdouble param);)
T(void)	N(TexGendv)	A((GLenum coord, GLenum pname, const GLdouble *params);)
T(void)	N(TexGenf)	A((GLenum coord, GLenum pname, GLfloat param);)
T(void)	N(TexGenfv)	A((GLenum coord, GLenum pname, const GLfloat *params);)
T(void)	N(TexGeni)	A((GLenum coord, GLenum pname, GLint param);)
T(void)	N(TexGeniv)	A((GLenum coord, GLenum pname, const GLint *params);)
T(void)	N(TexImage1D)	A((GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);)
T(void)	N(TexImage2D)	A((GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);)
T(void)	N(TexParameterf)	A((GLenum target, GLenum pname, GLfloat param);)
T(void)	N(TexParameterfv)	A((GLenum target, GLenum pname, const GLfloat *params);)
T(void)	N(TexParameteri)	A((GLenum target, GLenum pname, GLint param);)
T(void)	N(TexParameteriv)	A((GLenum target, GLenum pname, const GLint *params);)
T(void)	N(TexSubImage1D)	A((GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);)
T(void)	N(TexSubImage2D)	A((GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);)
T(void)	N(Translated)	A((GLdouble x, GLdouble y, GLdouble z);)
T(void)	N(Translatef)	A((GLfloat x, GLfloat y, GLfloat z);)
T(void)	N(Vertex2d)	A((GLdouble x, GLdouble y);)
T(void)	N(Vertex2dv)	A((const GLdouble *v);)
T(void)	N(Vertex2f)	A((GLfloat x, GLfloat y);)
T(void)	N(Vertex2fv)	A((const GLfloat *v);)
T(void)	N(Vertex2i)	A((GLint x, GLint y);)
T(void)	N(Vertex2iv)	A((const GLint *v);)
T(void)	N(Vertex2s)	A((GLshort x, GLshort y);)
T(void)	N(Vertex2sv)	A((const GLshort *v);)
T(void)	N(Vertex3d)	A((GLdouble x, GLdouble y, GLdouble z);)
T(void)	N(Vertex3dv)	A((const GLdouble *v);)
T(void)	N(Vertex3f)	A((GLfloat x, GLfloat y, GLfloat z);)
T(void)	N(Vertex3fv)	A((const GLfloat *v);)
T(void)	N(Vertex3i)	A((GLint x, GLint y, GLint z);)
T(void)	N(Vertex3iv)	A((const GLint *v);)
T(void)	N(Vertex3s)	A((GLshort x, GLshort y, GLshort z);)
T(void)	N(Vertex3sv)	A((const GLshort *v);)
T(void)	N(Vertex4d)	A((GLdouble x, GLdouble y, GLdouble z, GLdouble w);)
T(void)	N(Vertex4dv)	A((const GLdouble *v);)
T(void)	N(Vertex4f)	A((GLfloat x, GLfloat y, GLfloat z, GLfloat w);)
T(void)	N(Vertex4fv)	A((const GLfloat *v);)
T(void)	N(Vertex4i)	A((GLint x, GLint y, GLint z, GLint w);)
T(void)	N(Vertex4iv)	A((const GLint *v);)
T(void)	N(Vertex4s)	A((GLshort x, GLshort y, GLshort z, GLshort w);)
T(void)	N(Vertex4sv)	A((const GLshort *v);)
T(void)	N(VertexPointer)	A((GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);)
T(void)	N(Viewport)	A((GLint x, GLint y, GLsizei width, GLsizei height);)
T(void)	N(LockArraysEXT)	A((int, int);)
T(void)	N(UnlockArraysEXT)	A((void);)
T(void)	N(PointParameterfEXT)	A((GLenum param, GLfloat value);)
T(void)	N(PointParameterfvEXT)	A((GLenum param, const GLfloat *value);)
T(void)	N(ColorTableEXT)	A((int, int, int, int, int, const void *);)
T(void)	N(MTexCoord2fARB)	A((GLenum, GLfloat, GLfloat);)
T(void)	N(MTexCoord3fARB)	A((GLenum, GLfloat, GLfloat, GLfloat);)
T(void)	N(ActiveTextureARB)	A((GLenum);)
T(void)	N(ClientActiveTextureARB)	A((GLenum);)
T(void)	N(MultiTexCoord3fvARB)	A((GLenum, GLfloat *);)
